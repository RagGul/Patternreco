

        
        
        
   
import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader
from torchvision import datasets, transforms

# Define the VAE model
class VAE(nn.Module):
    def __init__(self):
        super(VAE, self).__init__()
        # Encoder
        self.encoder = nn.Sequential(
            nn.Linear(784, 400),  # Change input size to 784
            nn.ReLU(),
            nn.Linear(400, 200),
            nn.ReLU(),
        )
        # Mean and variance of the latent distribution
        self.fc_mu = nn.Linear(200, 100)
        self.fc_var = nn.Linear(200, 100)
        # Decoder
        self.decoder = nn.Sequential(
            nn.Linear(100, 200),
            nn.ReLU(),
            nn.Linear(200, 400),
            nn.ReLU(),
            nn.Linear(400, 784),  # Change output size to 784
            nn.Sigmoid(),
        )
    
    def encode(self, x):
        h = self.encoder(x)
        mu = self.fc_mu(h)
        var = self.fc_var(h)
        return mu, var
    
    def decode(self, z):
        h = self.decoder(z)
        return h
    
    def reparameterize(self, mu, var):
        # Reparameterization trick
        std = torch.exp(0.5 * var)
        eps = torch.randn_like(std)
        return mu + eps * std
    
    def forward(self, x):
        mu, var = self.encode(x)
        z = self.reparameterize(mu, var)
        reconstructed_x = self.decode(z)
        return reconstructed_x, mu, var

# Define the loss function
def loss_function(reconstructed_x, x, mu, var):
    # Reconstruction loss
    reconstruction_loss = nn.MSELoss()(reconstructed_x, x)
    # KL divergence loss
    kl_divergence = 0.5 * torch.sum(-1 - var + mu.pow(2) + var.exp())
    return reconstruction_loss + kl_divergence

# Initialize the VAE model
vae = VAE()

# Define an optimizer
optimizer = optim.Adam(vae.parameters(), lr=0.001)

# Define a data loader (you should replace this with your own dataset)
transform = transforms.Compose([transforms.ToTensor()])
train_loader = DataLoader(datasets.MNIST('.', train=True, transform=transform, download=True), batch_size=128, shuffle=True)

# Training loop
epochs = 10
for epoch in range(epochs):
    for batch_idx, (data, _) in enumerate(train_loader):
        data = data.view(data.size(0), -1)  # Flatten the data
        optimizer.zero_grad()
        reconstructed_data, mu, var = vae(data)
        loss = loss_function(reconstructed_data, data, mu, var)
        loss.backward()
        optimizer.step()
        if batch_idx % 100 == 0:
            print('Epoch [{}/{}], Batch [{}/{}], Loss: {:.4f}'.format(epoch + 1, epochs, batch_idx, len(train_loader), loss.item()))

# After training, you can use the VAE to generate new samples
# Sample from the latent space (z) and decode to generate new data
z_sample = torch.randn(64, 100)  # 64 samples from a 100-dimensional latent space
generated_samples = vae.decode(z_sample)

# You can now use 'generated_samples' for whatever purpose you need
